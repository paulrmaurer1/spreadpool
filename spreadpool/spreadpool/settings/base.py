"""
Base Django settings for spreadpool project. Valid across all system environments

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os, datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# print ("base_dir : ", BASE_DIR)

# Application definition

INSTALLED_APPS = [
    'bracket.apps.BracketConfig',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.sites.middleware.CurrentSiteMiddleware',
]

ROOT_URLCONF = 'spreadpool.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, '../templates')], # (original)'DIRS': ['templates']
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'spreadpool.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Chicago'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# STATIC_ROOT is the directory or location where your static files are deployed when you run collectstatic.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# print ("static root : ", STATIC_ROOT)
# STATIC_URL is the url that is prepended to your static files and is used by the static method in Django templates mostly
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)


# Set Abstract User class (User)
AUTH_USER_MODEL = 'bracket.User'

# Set the home view as redirect URL for both login & logout views
LOGIN_REDIRECT_URL = 'bracket:home'
LOGOUT_REDIRECT_URL = 'bracket:home'


REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
    # This is the most permissable permission setting
        # 'rest_framework.permissions.AllowAny'
    # This setting is default permission class
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    # This setting mandates jwt token authentication for REST API update, create, patch (Production)
        # 'rest_framework.permissions.IsAuthenticated'
        'rest_framework.permissions.IsAuthenticatedOrReadOnly'
    ],
    #   'DEFAULT_RENDERER_CLASSES': ('rest_framework.renderers.JSONRenderer',),
    #   'DEFAULT_PARSER_CLASSES': ('rest_framework.parsers.JSONParser',)
    #
    # These settings are needed for the djangorestframework-jwt (JSON Web Token)
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
}

# Specify to installed package, django-cors-headers, which origin hostnames 
# are authorized to make cross-site HTTP requests, e.g. Angular server
CORS_ORIGIN_WHITELIST = (
    'https://localhost:4200',
    'https://127.0.0.1:8000',
    'https://spreadpool-fe.herokuapp.com',
)

# Configuration settings for djangorestframework-jwt (JSON Web Token)
JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,  # enables ability to request a refreshed token with a new expiration date
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=3600),  # configurable life span of token (default = 5 minutes)
}

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'